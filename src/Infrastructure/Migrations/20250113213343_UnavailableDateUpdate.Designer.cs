// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BlacktieDbContext))]
    [Migration("20250113213343_UnavailableDateUpdate")]
    partial class UnavailableDateUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("blacktie")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complement");

                    b.Property<int>("CountryId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Locality")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("locality");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("postal_code");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("region_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("address", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audits", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Control", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ControlNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("control_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("control", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CallingCode")
                        .HasColumnType("text")
                        .HasColumnName("calling_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.ToTable("country", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("document_type_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("tax_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.HasIndex("DocumentTypeId")
                        .IsUnique();

                    b.ToTable("customer", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("customer_address", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.ToTable("document_type", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.FromTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.ToTable("from_to", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("payment_type_id");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("TotalBigBags")
                        .HasColumnType("integer")
                        .HasColumnName("total_bigbags");

                    b.Property<int>("TotalPassengers")
                        .HasColumnType("integer")
                        .HasColumnName("total_passengers");

                    b.Property<int>("TotalSmallBags")
                        .HasColumnType("integer")
                        .HasColumnName("total_smallbags");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("order", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.ToTable("payment_type", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<int>("FromId")
                        .HasColumnType("int")
                        .HasColumnName("from_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<int>("ToId")
                        .HasColumnType("int")
                        .HasColumnName("to_id");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.HasIndex("TransportId");

                    b.ToTable("product", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.ProductPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean")
                        .HasColumnName("available");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percent");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("payment_type_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_pricing", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("text")
                        .HasColumnName("youtube_link");

                    b.HasKey("Id");

                    b.ToTable("transport", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.TransportVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<int>("TotalBigBags")
                        .HasColumnType("int")
                        .HasColumnName("big_bags");

                    b.Property<int>("TotalPassengers")
                        .HasColumnType("int")
                        .HasColumnName("passengers");

                    b.Property<int>("TotalSmallBags")
                        .HasColumnType("int")
                        .HasColumnName("small_bags");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.ToTable("transport_variation", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.UnavailableDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Obs")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("obs");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("unavailable_date", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasComment("When this entity was created in this DB");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The id of the user who did create");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at")
                        .HasComment("When this entity was deleted in this DB");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("deleted_by_user_id")
                        .HasComment("The id of the user who did the delete");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("The field that identifies that the entity was deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at")
                        .HasComment("When this entity was modified the last time");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("update_by_user_id")
                        .HasComment("The id of the user who did the last modification");

                    b.HasKey("Id");

                    b.ToTable("user", "blacktie");
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.HasOne("Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.HasOne("Domain.Models.Country", "Country")
                        .WithOne()
                        .HasForeignKey("Domain.Models.Customer", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.DocumentType", "DocumentType")
                        .WithOne()
                        .HasForeignKey("Domain.Models.Customer", "DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Domain.Models.CustomerAddress", b =>
                {
                    b.HasOne("Domain.Models.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.FromTo", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.FromTo", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Domain.Models.ProductPricing", b =>
                {
                    b.HasOne("Domain.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("Pricing")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.TransportVariation", b =>
                {
                    b.HasOne("Domain.Models.Transport", "Transport")
                        .WithMany("Variations")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("Pricing");
                });

            modelBuilder.Entity("Domain.Models.Transport", b =>
                {
                    b.Navigation("Variations");
                });
#pragma warning restore 612, 618
        }
    }
}
